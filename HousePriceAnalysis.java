import java.io.*;
import java.util.*;

public class HousePriceAnalysis {
    
    // 数据数组
    private static final double[] 中介单价 = {
        13465, 12492, 10970, 8918, 10461, 16702, 11935, 14159, 12513, 16000, 11994, 9567, 14571, 11399, 20198, 18492, 18852, 10164, 16702, 13481, 19213, 11935, 26394, 9023, 25147, 28257, 28196, 26394, 9993, 17903, 26394, 11935, 10038, 7568, 10627, 6402, 10088, 37982, 27967, 112, 13198, 13198, 16148, 26131, 26131, 22030, 8991, 10915, 18168, 15967, 16014, 16014, 11515, 9958, 6678, 14853, 7999, 14984, 28060, 7999, 26604, 14000, 25684, 25684, 10937, 17980, 7987, 7987, 9336, 26604, 7420, 10676, 9256, 8996, 13977, 9631, 15975, 9969, 16932, 7435, 15017, 9917, 8892, 7501, 8893, 12019, 6984, 6842, 8959, 7921, 12899, 11889, 8148, 18019, 11986, 8036, 8979, 21008, 7016, 16567, 16567, 7227, 6446, 20000, 8966, 11006, 11500, 17000, 9030, 9961, 7224, 10062, 9836, 15998, 12701, 32441, 5970, 9026, 5889, 14828, 14914, 12081, 7695, 9562, 11974, 14016, 8510, 8554, 8045, 14872, 18155, 10000, 16139, 17988, 17993, 17898, 8525, 17942, 17934, 17949, 9451, 11002, 6434, 15810, 11297, 19975, 13826, 8005, 9628, 10028, 11484, 13555, 11817, 8000, 6542, 18661, 8510, 18577, 8002, 19095, 28935, 17995, 8963, 10557, 8086, 25037, 21621, 15096, 10479, 17993, 5379, 8000, 8000, 13164, 6473, 10033, 7967, 4720, 4741, 7442, 4709, 4836, 4752, 4826, 9928, 8082, 3505, 24655, 6141, 13765, 17770, 10008, 7000, 13244, 10557, 8419, 40833, 11905, 6479, 7893, 20024, 9549, 4871, 6455, 14036, 8559, 4678, 9946, 18965, 7841, 14462, 8405, 7942, 8596, 6506, 19759, 17041, 7937, 5578, 8801, 27753, 11122, 9410, 8774, 9997, 6576, 16313, 15739, 30303, 10971, 12632, 11314, 8012, 8012, 13956, 14957, 17955, 7020, 14377, 15086, 8219, 19414, 42222, 68769, 43208, 9707, 7043, 9982, 9298, 8407, 15629, 15070, 11250, 10147, 19603, 10702, 7914, 10981, 23944, 10018, 8606, 11889, 7848, 11784, 8377, 22785, 3931, 17770, 7095, 9479, 14688, 7072, 8967, 22918, 9992, 11374, 9986, 5474, 11889, 6963, 12305, 9017, 13381, 10037, 12933, 14688, 5913, 10569, 8918, 8400, 8871, 15762, 9884, 6942, 9911, 13765, 6857, 6857, 5941, 6919, 8509, 6023, 9722, 9619, 8537, 10000, 16955, 18123, 6781, 9004, 4562, 13891, 10061, 11850, 13869, 12376, 6974, 7856, 20932, 5103, 7186, 5671, 8515, 28721, 5450, 7991, 6500, 7784, 17783, 13715, 8075, 6790, 12086, 9444, 13869, 13891, 20247, 11916, 10492, 5556, 7951, 8262, 8362, 9620, 9229, 6969, 8323, 17544, 10696, 8525, 8442, 5921, 6923, 7877, 6759, 5201, 7355, 5501, 13891, 5614, 11722, 7186, 11956, 5484, 8104, 7482, 7390
    };
    
    private static final double[] 国信达单价 = {
        14681, 13298, 10016, 9124, 12236, 14185, 12430, 14389, 12138, 14662, 13213, 9736, 16959, 12700, 20010, 23960, 18990, 8483, 13978, 14010, 19069, 11461, 27248, 9511, 26070, 26174, 26174, 27663, 14254, 13988, 27248, 11251, 9621, 8705, 10502, 6927, 10854, 29462, 31678, 15610, 15291, 15291, 14124, 27611, 27307, 19953, 13603, 11035, 17546, 15700, 17093, 17093, 11154, 10995, 11013, 15960, 7907, 17686, 29596, 8331, 29071, 20621, 24072, 24072, 13236, 19049, 8916, 8916, 10670, 29994, 7175, 10447, 10872, 16330, 14278, 13640, 18084, 13239, 15843, 9394, 17793, 12754, 12904, 8585, 11451, 14332, 8183, 7018, 12397, 12134, 15664, 11534, 12197, 19049, 12038, 8369, 11869, 24693, 9851, 19273, 19273, 7291, 7822, 21487, 9543, 15254, 10453, 19079, 10202, 11323, 6594, 13182, 11480, 17463, 12067, 31441, 6716, 11183, 10566, 16498, 14496, 12044, 8573, 11127, 11907, 13822, 9097, 13172, 10082, 14517, 17499, 11162, 17559, 18034, 20243, 18568, 10558, 18126, 18126, 19342, 8422, 13257, 7136, 14133, 13899, 25713, 14380, 9517, 12208, 11797, 11815, 17455, 17952, 8743, 6590, 21062, 9694, 19956, 8859, 20719, 29094, 23387, 15112, 11215, 10491, 23690, 21982, 16793, 14857, 19958, 10975, 12362, 9042, 15425, 11050, 11312, 11283, 7267, 7304, 9171, 7304, 7304, 7193, 7304, 11282, 9079, 4744, 31507, 8859, 16127, 19753, 12003, 7457, 13084, 12218, 12552, 31757, 15454, 9897, 10304, 22437, 11818, 6332, 9245, 16972, 12019, 6637, 10670, 24514, 12140, 14589, 10107, 8268, 13160, 7145, 29291, 17775, 9511, 7687, 12883, 23620, 11311, 12387, 10704, 19131, 7245, 13576, 15263, 36579, 11919, 16456, 11362, 12172, 12172, 14719, 16991, 23659, 10471, 17526, 16799, 9744, 23798, 36354, 13138, 11873, 11148, 9429, 10865, 9236, 9612, 23369, 18107, 13586, 11755, 18830, 8880, 10887, 14249, 27796, 13185, 8726, 16060, 8877, 12898, 11083, 34559, 6401, 19041, 7124, 11143, 15057, 7475, 11136, 14655, 11787, 10375, 11812, 5602, 15817, 6791, 12402, 10871, 14348, 13564, 7188, 15833, 8060, 12284, 9723, 10831, 10100, 3130, 13156, 8831, 12258, 13999, 8903, 8903, 7018, 7793, 8863, 9287, 14688, 13041, 9443, 10199, 16808, 19931, 10847, 9601, 6898, 14583, 10987, 13201, 15995, 15926, 7232, 8662, 23322, 5853, 12638, 7840, 13673, 26121, 6615, 12000, 8047, 8584, 27251, 13602, 10800, 6886, 12306, 10125, 13959, 14519, 24411, 18024, 11349, 8582, 8115, 6851, 6851, 9110, 9762, 7071, 9470, 16410, 9459, 9116, 9124, 5117, 8121, 9078, 8601, 9500, 6864, 5908, 13644, 7036, 13701, 9221, 13464, 5934, 9917, 9432, 6943
    };
    
    public static void main(String[] args) {
        System.out.println("=== 房屋价格数据分析 (过原点模型) ===");
        
        int n = 中介单价.length;
        System.out.println("数据量: " + n);
        
        // 计算平均值
        double 中介单价_平均 = calculateMean(中介单价);
        double 国信达单价_平均 = calculateMean(国信达单价);
        
        System.out.printf("中介单价平均值: %.2f%n", 中介单价_平均);
        System.out.printf("国信达单价平均值: %.2f%n", 国信达单价_平均);
        
        // 计算过原点的线性回归参数 (y = kx)
        double 比例系数 = calculateProportionalSlope(国信达单价, 中介单价);
        
        System.out.println("\n过原点线性回归结果:");
        System.out.printf("比例系数: %.4f%n", 比例系数);
        
        // 计算预测值
        double[] 预测值 = new double[n];
        for (int i = 0; i < n; i++) {
            预测值[i] = 比例系数 * 国信达单价[i];
        }
        
        // 计算R²
        double r2 = calculateRSquared(中介单价, 预测值, 中介单价_平均);
        
        // 计算MAE
        double mae = calculateMAE(中介单价, 预测值);
        
        System.out.printf("R²: %.4f%n", r2);
        System.out.printf("MAE: %.2f%n", mae);
        
        // 计算调整后的差异
        double[] 调整后差异 = new double[n];
        for (int i = 0; i < n; i++) {
            调整后差异[i] = 预测值[i] - 中介单价[i];
        }
        
        double 调整后差异_平均 = calculateMean(调整后差异);
        double 调整后差异_标准差 = calculateStandardDeviation(调整后差异);
        
        System.out.println("\n调整后差异统计:");
        System.out.printf("平均差异: %.2f%n", 调整后差异_平均);
        System.out.printf("差异标准差: %.2f%n", 调整后差异_标准差);
        
        // 输出最终公式
        System.out.println("\n=== 推荐调整公式 ===");
        System.out.printf("中介单价 ≈ %.4f × 国信达单价%n", 比例系数);
        System.out.printf("调整效果: R² = %.4f, MAE = %.2f%n", r2, mae);
        
        // 保存结果到文件
        saveResultsToFile(比例系数, r2, mae, 调整后差异_平均, 调整后差异_标准差, n, 中介单价_平均, 国信达单价_平均);
        
        // 演示公式使用
        demonstrateFormula(比例系数);
    }
    
    // 计算平均值
    private static double calculateMean(double[] values) {
        double sum = 0;
        for (double value : values) {
            sum += value;
        }
        return sum / values.length;
    }
    
    // 计算标准差
    private static double calculateStandardDeviation(double[] values) {
        double mean = calculateMean(values);
        double sum = 0;
        for (double value : values) {
            sum += Math.pow(value - mean, 2);
        }
        return Math.sqrt(sum / values.length);
    }
    
    // 计算过原点的线性回归比例系数 (y = kx)
    private static double calculateProportionalSlope(double[] x, double[] y) {
        double numerator = 0;
        double denominator = 0;
        
        for (int i = 0; i < x.length; i++) {
            numerator += x[i] * y[i];
            denominator += x[i] * x[i];
        }
        
        return numerator / denominator;
    }
    
    // 计算R²
    private static double calculateRSquared(double[] actual, double[] predicted, double actualMean) {
        double ssRes = 0;
        double ssTot = 0;
        
        for (int i = 0; i < actual.length; i++) {
            ssRes += Math.pow(actual[i] - predicted[i], 2);
            ssTot += Math.pow(actual[i] - actualMean, 2);
        }
        
        return 1 - (ssRes / ssTot);
    }
    
    // 计算MAE
    private static double calculateMAE(double[] actual, double[] predicted) {
        double sum = 0;
        for (int i = 0; i < actual.length; i++) {
            sum += Math.abs(actual[i] - predicted[i]);
        }
        return sum / actual.length;
    }
    
    // 保存结果到文件
    private static void saveResultsToFile(double 比例系数, double r2, double mae, 
                                        double 调整后差异_平均, double 调整后差异_标准差, 
                                        int n, double 中介单价_平均, double 国信达单价_平均) {
        try (PrintWriter writer = new PrintWriter(new FileWriter("house_price_formula_java.txt"))) {
            writer.println("=== 房屋价格调整公式 (Java版本 - 过原点模型) ===");
            writer.println();
            writer.println("数据量: " + n);
            writer.printf("中介单价平均值: %.2f%n", 中介单价_平均);
            writer.printf("国信达单价平均值: %.2f%n", 国信达单价_平均);
            writer.println();
            writer.println("过原点线性回归公式:");
            writer.printf("中介单价 = %.4f × 国信达单价%n", 比例系数);
            writer.println();
            writer.println("模型评估:");
            writer.printf("R² = %.4f%n", r2);
            writer.printf("MAE = %.2f%n", mae);
            writer.printf("调整后平均差异 = %.2f%n", 调整后差异_平均);
            writer.printf("调整后差异标准差 = %.2f%n", 调整后差异_标准差);
            
            System.out.println("\n结果已保存到 house_price_formula_java.txt");
        } catch (IOException e) {
            System.err.println("保存文件时出错: " + e.getMessage());
        }
    }
    
    // 演示公式使用
    private static void demonstrateFormula(double 比例系数) {
        System.out.println("\n=== 公式使用示例 ===");
        
        double[] 测试价格 = {10000, 15000, 20000, 25000, 30000};
        
        for (double 国信达价格 : 测试价格) {
            double 预测中介价格 = 比例系数 * 国信达价格;
            System.out.printf("国信达单价: %.0f元/㎡ → 预测中介单价: %.0f元/㎡%n", 
                            国信达价格, 预测中介价格);
        }
    }
} 