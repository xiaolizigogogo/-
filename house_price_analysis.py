import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

# 创建数据
data = {
    '中介单价': [13465, 12492, 10970, 8918, 10461, 16702, 11935, 14159, 12513, 16000, 11994, 9567, 14571, 11399, 20198, 18492, 18852, 10164, 16702, 13481, 19213, 11935, 26394, 9023, 25147, 28257, 28196, 26394, 9993, 17903, 26394, 11935, 10038, 7568, 10627, 6402, 10088, 37982, 27967, 112, 13198, 13198, 16148, 26131, 26131, 22030, 8991, 10915, 18168, 15967, 16014, 16014, 11515, 9958, 6678, 14853, 7999, 14984, 28060, 7999, 26604, 14000, 25684, 25684, 10937, 17980, 7987, 7987, 9336, 26604, 7420, 10676, 9256, 8996, 13977, 9631, 15975, 9969, 16932, 7435, 15017, 9917, 8892, 7501, 8893, 12019, 6984, 6842, 8959, 7921, 12899, 11889, 8148, 18019, 11986, 8036, 8979, 21008, 7016, 16567, 16567, 7227, 6446, 20000, 8966, 11006, 11500, 17000, 9030, 9961, 7224, 10062, 9836, 15998, 12701, 32441, 5970, 9026, 5889, 14828, 14914, 12081, 7695, 9562, 11974, 14016, 8510, 8554, 8045, 14872, 18155, 10000, 16139, 17988, 17993, 17898, 8525, 17942, 17934, 17949, 9451, 11002, 6434, 15810, 11297, 19975, 13826, 8005, 9628, 10028, 11484, 13555, 11817, 8000, 6542, 18661, 8510, 18577, 8002, 19095, 28935, 17995, 8963, 10557, 8086, 25037, 21621, 15096, 10479, 17993, 5379, 8000, 8000, 13164, 6473, 10033, 7967, 4720, 4741, 7442, 4709, 4836, 4752, 4826, 9928, 8082, 3505, 24655, 6141, 13765, 17770, 10008, 7000, 13244, 10557, 8419, 40833, 11905, 6479, 7893, 20024, 9549, 4871, 6455, 14036, 8559, 4678, 9946, 18965, 7841, 14462, 8405, 7942, 8596, 6506, 19759, 17041, 7937, 5578, 8801, 27753, 11122, 9410, 8774, 9997, 6576, 16313, 15739, 30303, 10971, 12632, 11314, 8012, 8012, 13956, 14957, 17955, 7020, 14377, 15086, 8219, 19414, 42222, 68769, 43208, 9707, 7043, 9982, 9298, 8407, 15629, 15070, 11250, 10147, 19603, 10702, 7914, 10981, 23944, 10018, 8606, 11889, 7848, 11784, 8377, 22785, 3931, 17770, 7095, 9479, 14688, 7072, 8967, 22918, 9992, 11374, 9986, 5474, 11889, 6963, 12305, 9017, 13381, 10037, 12933, 14688, 5913, 10569, 8918, 8400, 8871, 15762, 9884, 6942, 9911, 13765, 6857, 6857, 5941, 6919, 8509, 6023, 9722, 9619, 8537, 10000, 16955, 18123, 6781, 9004, 4562, 13891, 10061, 11850, 13869, 12376, 6974, 7856, 20932, 5103, 7186, 5671, 8515, 28721, 5450, 7991, 6500, 7784, 17783, 13715, 8075, 6790, 12086, 9444, 13869, 13891, 20247, 11916, 10492, 5556, 7951, 8262, 8362, 9620, 9229, 6969, 8323, 17544, 10696, 8525, 8442, 5921, 6923, 7877, 6759, 5201, 7355, 5501, 13891, 5614, 11722, 7186, 11956, 5484, 8104, 7482, 7390],
    '国信达单价': [14681, 13298, 10016, 9124, 12236, 14185, 12430, 14389, 12138, 14662, 13213, 9736, 16959, 12700, 20010, 23960, 18990, 8483, 13978, 14010, 19069, 11461, 27248, 9511, 26070, 26174, 26174, 27663, 14254, 13988, 27248, 11251, 9621, 8705, 10502, 6927, 10854, 29462, 31678, 15610, 15291, 15291, 14124, 27611, 27307, 19953, 13603, 11035, 17546, 15700, 17093, 17093, 11154, 10995, 11013, 15960, 7907, 17686, 29596, 8331, 29071, 20621, 24072, 24072, 13236, 19049, 8916, 8916, 10670, 29994, 7175, 10447, 10872, 16330, 14278, 13640, 18084, 13239, 15843, 9394, 17793, 12754, 12904, 8585, 11451, 14332, 8183, 7018, 12397, 12134, 15664, 11534, 12197, 19049, 12038, 8369, 11869, 24693, 9851, 19273, 19273, 7291, 7822, 21487, 9543, 15254, 10453, 19079, 10202, 11323, 6594, 13182, 11480, 17463, 12067, 31441, 6716, 11183, 10566, 16498, 14496, 12044, 8573, 11127, 11907, 13822, 9097, 13172, 10082, 14517, 17499, 11162, 17559, 18034, 20243, 18568, 10558, 18126, 18126, 19342, 8422, 13257, 7136, 14133, 13899, 25713, 14380, 9517, 12208, 11797, 11815, 17455, 17952, 8743, 6590, 21062, 9694, 19956, 8859, 20719, 29094, 23387, 15112, 11215, 10491, 23690, 21982, 16793, 14857, 19958, 10975, 12362, 9042, 15425, 11050, 11312, 11283, 7267, 7304, 9171, 7304, 7304, 7193, 7304, 11282, 9079, 4744, 31507, 8859, 16127, 19753, 12003, 7457, 13084, 12218, 12552, 31757, 15454, 9897, 10304, 22437, 11818, 6332, 9245, 16972, 12019, 6637, 10670, 24514, 12140, 14589, 10107, 8268, 13160, 7145, 29291, 17775, 9511, 7687, 12883, 23620, 11311, 12387, 10704, 19131, 7245, 13576, 15263, 36579, 11919, 16456, 11362, 12172, 12172, 14719, 16991, 23659, 10471, 17526, 16799, 9744, 23798, 36354, 13138, 11873, 11148, 9429, 10865, 9236, 9612, 23369, 18107, 13586, 11755, 18830, 8880, 10887, 14249, 27796, 13185, 8726, 16060, 8877, 12898, 11083, 34559, 6401, 19041, 7124, 11143, 15057, 7475, 11136, 14655, 11787, 10375, 11812, 5602, 15817, 6791, 12402, 10871, 14348, 13564, 7188, 15833, 8060, 12284, 9723, 10831, 10100, 3130, 13156, 8831, 12258, 13999, 8903, 8903, 7018, 7793, 8863, 9287, 14688, 13041, 9443, 10199, 16808, 19931, 10847, 9601, 6898, 14583, 10987, 13201, 15995, 15926, 7232, 8662, 23322, 5853, 12638, 7840, 13673, 26121, 6615, 12000, 8047, 8584, 27251, 13602, 10800, 6886, 12306, 10125, 13959, 14519, 24411, 18024, 11349, 8582, 8115, 6851, 6851, 9110, 9762, 7071, 9470, 16410, 9459, 9116, 9124, 5117, 8121, 9078, 8601, 9500, 6864, 5908, 13644, 7036, 13701, 9221, 13464, 5934, 9917, 9432, 6943],
    '国信达总价': [1308371.00, 2373826.00, 748696.00, 797985.00, 959180.00, 1282466.00, 916464.00, 1575164.00, 1309569.00, 2110595.00, 1253649.00, 844695.00, 1280235.00, 947039.00, 1713857.00, 3381714.00, 1108067.00, 742771.00, 1263751.00, 2057649.00, 4069325.00, 777858.00, 2116352.00, 1011970.00, 3369287.00, 1093026.00, 1095382.00, 2148585.00, 1141175.00, 1039169.00, 2116352.00, 763605.00, 1169336.00, 506109.00, 874607.00, 1363372.00, 419616.00, 3544868.00, 3114898.00, 2373188.00, 1552495.00, 1552495.00, 1478218.00, 1532134.00, 1515265.00, 2400146.00, 891133.00, 1395155.00, 2366078.00, 2084489.00, 1152752.00, 1152752.00, 629643.00, 1490592.00, 1154383.00, 827366.00, 687039.00, 1581659.00, 3849848.00, 723881.00, 5463604.00, 1413157.00, 3561452.00, 3561452.00, 1428032.00, 2246068.00, 714439.00, 714439.00, 1142864.00, 5637072.00, 377118.00, 978570.00, 1186353.00, 513742.00, 3554936.00, 2124294.00, 2105520.00, 2164577.00, 1384837.00, 328508.00, 1362588.00, 964585.00, 561582.00, 753076.00, 914248.00, 1490528.00, 703002.00, 666710.00, 553526.00, 1072282.00, 1517998.00, 1115684.00, 1077849.00, 1744317.00, 1325745.00, 520719.00, 898839.00, 2292004.00, 526536.00, 1512352.00, 1512352.00, 554845.00, 497557.00, 2324893.00, 574775.00, 1607772.00, 640455.00, 1588708.00, 790859.00, 875268.00, 255583.00, 1310027.00, 490196.00, 1309900.00, 1330145.00, 1163003.00, 421832.00, 892068.00, 448527.00, 1613339.00, 1321890.00, 1046744.00, 445625.00, 1163662.00, 984471.00, 2169501.00, 502427.00, 846960.00, 614095.00, 1171377.00, 1927690.00, 721512.00, 1414377.00, 2737020.00, 1676323.00, 1711784.00, 829753.00, 2333723.00, 2383206.00, 2112146.00, 730693.00, 1096486.00, 665503.00, 1144208.00, 1045761.00, 2291285.00, 832027.00, 1783295.00, 1077722.00, 1294013.00, 967058.00, 1480882.00, 2567136.00, 1055980.00, 705130.00, 1975194.00, 673248.00, 1826174.00, 669302.00, 1649232.00, 2191942.00, 909754.00, 505799.00, 956079.00, 804450.00, 3500908.00, 2541779.00, 2336074.00, 1276068.00, 2673175.00, 2346345.00, 647274.00, 361680.00, 1078053.00, 563329.00, 1353028.00, 991324.00, 1077696.00, 924321.00, 455982.00, 1085740.00, 1208301.00, 908260.00, 1210857.00, 704561.00, 640342.00, 284213.00, 2811370.00, 504874.00, 1288709.00, 2223200.00, 1067427.00, 372850.00, 918758.00, 1388820.00, 894581.00, 2333187.00, 934658.00, 534636.00, 783310.00, 2218571.00, 767343.00, 584950.00, 386718.00, 1523576.00, 589772.00, 638413.00, 901188.00, 2184443.00, 464476.00, 1513171.00, 841711.00, 1561660.00, 688926.00, 571100.00, 7412088.00, 3129289.00, 838870.00, 413407.00, 1390591.00, 2425538.00, 1627200.00, 526571.00, 792952.00, 1205636.00, 594959.00, 1165092.00, 1066731.00, 3017768.00, 966869.00, 2214648.00, 903847.00, 653271.00, 653271.00, 1339429.00, 2101617.00, 2108253.00, 596638.00, 2438042.00, 2060061.00, 1066968.00, 2267711.00, 16359300.00, 1241804.00, 1318972.00, 1033643.00, 1204932.00, 1034022.00, 794665.00, 480216.00, 1943833.00, 1622025.00, 1207660.00, 926764.00, 4130361.00, 663780.00, 770364.00, 1232681.00, 5223980.00, 1118747.00, 912565.00, 2161355.00, 678647.00, 1204028.00, 502725.00, 2730161.00, 488524.00, 2143065.00, 552252.00, 2351173.00, 1332695.00, 475634.00, 906582.00, 3772783.00, 1097016.00, 1459451.00, 1242032.00, 440037.00, 2128652.00, 575401.00, 1209443.00, 747490.00, 1125888.00, 1486614.00, 450184.00, 1401379.00, 408964.00, 1162312.00, 817704.00, 618883.00, 910818.00, 992899.00, 865139.00, 801413.00, 507113.00, 1118660.00, 545309.00, 545309.00, 448871.00, 641987.00, 572904.00, 431753.00, 1435311.00, 1084620.00, 995481.00, 1070895.00, 3003758.00, 3629236.00, 687808.00, 671782.00, 529215.00, 1574672.00, 982787.00, 1058324.00, 1326305.00, 1351162.00, 466681.00, 606427.00, 4178136.00, 481760.00, 1266201.00, 552955.00, 457635.00, 2546536.00, 485541.00, 563160.00, 321880.00, 716764.00, 6895866.00, 3471094.00, 601884.00, 608516.00, 356382.00, 964913.00, 1157480.00, 1567762.00, 1205659.00, 1890718.00, 973517.00, 447980.00, 643033.00, 1202419.00, 1106094.00, 1231034.00, 846170.00, 558043.00, 796427.00, 1870740.00, 468693.00, 630918.00, 702548.00, 561693.00, 480926.00, 691471.00, 890806.00, 940690.00, 438610.00, 483333.00, 1473279.00, 463743.00, 1344205.00, 923852.00, 1182408.00, 508603.00, 465008.00, 983286.00, 347636.00]
}

# 创建DataFrame
df = pd.DataFrame(data)

# 数据预处理
print("数据概览：")
print(f"总数据量: {len(df)}")
print(f"中介单价范围: {df['中介单价'].min():.0f} - {df['中介单价'].max():.0f}")
print(f"国信达单价范围: {df['国信达单价'].min():.0f} - {df['国信达单价'].max():.0f}")
print(f"国信达总价范围: {df['国信达总价'].min():.0f} - {df['国信达总价'].max():.0f}")

# 计算基本统计信息
print("\n基本统计信息：")
print(df.describe())

# 计算相关性
correlation = df['中介单价'].corr(df['国信达单价'])
print(f"\n中介单价与国信达单价的相关性: {correlation:.4f}")

# 计算价格差异
df['价格差异'] = df['国信达单价'] - df['中介单价']
df['价格差异百分比'] = (df['价格差异'] / df['中介单价']) * 100

print(f"\n价格差异统计：")
print(f"平均差异: {df['价格差异'].mean():.2f}")
print(f"差异标准差: {df['价格差异'].std():.2f}")
print(f"平均差异百分比: {df['价格差异百分比'].mean():.2f}%")

# 线性回归分析
X = df[['国信达单价']].values
y = df['中介单价'].values

model = LinearRegression()
model.fit(X, y)

# 预测
y_pred = model.predict(X)

# 评估模型
r2 = r2_score(y, y_pred)
mae = mean_absolute_error(y, y_pred)
rmse = np.sqrt(mean_squared_error(y, y_pred))

print(f"\n线性回归结果：")
print(f"斜率: {model.coef_[0]:.4f}")
print(f"截距: {model.intercept_:.2f}")
print(f"R²: {r2:.4f}")
print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")

# 计算调整后的国信达单价
df['调整后国信达单价'] = model.predict(X)

# 计算调整后的差异
df['调整后差异'] = df['调整后国信达单价'] - df['中介单价']
df['调整后差异百分比'] = (df['调整后差异'] / df['中介单价']) * 100

print(f"\n调整后差异统计：")
print(f"平均差异: {df['调整后差异'].mean():.2f}")
print(f"差异标准差: {df['调整后差异'].std():.2f}")
print(f"平均差异百分比: {df['调整后差异百分比'].mean():.2f}%")

# 尝试多项式回归
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline

# 二次多项式回归
poly_model = Pipeline([
    ('poly', PolynomialFeatures(degree=2)),
    ('linear', LinearRegression())
])

poly_model.fit(X, y)
y_pred_poly = poly_model.predict(X)

r2_poly = r2_score(y, y_pred_poly)
mae_poly = mean_absolute_error(y, y_pred_poly)
rmse_poly = np.sqrt(mean_squared_error(y, y_pred_poly))

print(f"\n二次多项式回归结果：")
print(f"R²: {r2_poly:.4f}")
print(f"MAE: {mae_poly:.2f}")
print(f"RMSE: {rmse_poly:.2f}")

# 计算调整后的国信达单价（多项式）
df['调整后国信达单价_多项式'] = y_pred_poly

# 计算调整后的差异（多项式）
df['调整后差异_多项式'] = df['调整后国信达单价_多项式'] - df['中介单价']
df['调整后差异百分比_多项式'] = (df['调整后差异_多项式'] / df['中介单价']) * 100

print(f"\n多项式调整后差异统计：")
print(f"平均差异: {df['调整后差异_多项式'].mean():.2f}")
print(f"差异标准差: {df['调整后差异_多项式'].std():.2f}")
print(f"平均差异百分比: {df['调整后差异百分比_多项式'].mean():.2f}%")

# 输出最佳公式
print(f"\n=== 最佳调整公式 ===")
if r2_poly > r2:
    print(f"推荐使用二次多项式公式：")
    print(f"中介单价 ≈ {poly_model.named_steps['linear'].intercept_:.2f} + {poly_model.named_steps['linear'].coef_[1]:.4f} × 国信达单价 + {poly_model.named_steps['linear'].coef_[2]:.6f} × 国信达单价²")
    print(f"调整效果: R² = {r2_poly:.4f}, MAE = {mae_poly:.2f}")
else:
    print(f"推荐使用线性公式：")
    print(f"中介单价 ≈ {model.intercept_:.2f} + {model.coef_[0]:.4f} × 国信达单价")
    print(f"调整效果: R² = {r2:.4f}, MAE = {mae:.2f}")

# 保存结果
df.to_csv('house_price_analysis_results.csv', index=False, encoding='utf-8-sig')
print(f"\n分析结果已保存到 house_price_analysis_results.csv") 